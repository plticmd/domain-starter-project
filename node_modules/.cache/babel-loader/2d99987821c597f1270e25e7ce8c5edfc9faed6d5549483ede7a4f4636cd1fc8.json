{"ast":null,"code":"var _jsxFileName = \"/Users/007/DEV/Unchain/cool-domains/frontend/domain-starter-project/src/App.js\",\n  _s = $RefreshSig$();\n// import React from 'react';\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\n\n// Constants\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TWITTER_HANDLE = '_UNCHAIN';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst App = () => {\n  _s();\n  //ユーザーのウォレットアドレスをstate管理しています。冒頭のuseStateのインポートを忘れないでください。\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  // connectWallet 関数を定義\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        alert(\"Get Metamask -> https://metamask.io/\");\n        return;\n      }\n\n      // アカウントへのアクセスを要求するメソッドを使用します。\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n\n      // Metamask を一度認証すれば Connected とコンソールに表示されます。\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  // ウォレットの接続を確認します。\n  //const checkIfWalletIsConnected = () => {\n  const checkIfWalletIsConnected = async () => {\n    // window.ethereumの設定。この表記法はJavascriptの「分割代入」を参照。\n    const {\n      ethereum\n    } = window;\n    if (!ethereum) {\n      console.log(\"Make sure you have Metamask!\");\n      return;\n    } else {\n      console.log(\"You have the ethereum object\", ethereum);\n    }\n\n    // ユーザーのウォレットをリクエストします。\n    const accounts = await ethereum.request({\n      method: \"eth_accounts\"\n    });\n\n    // ユーザーが複数のアカウントを持っている場合もあります。ここでは最初のアドレスを使います。\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  // まだウォレットに接続されていない場合のレンダリングです。\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connect-wallet-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: \"https://media.giphy.com/media/yy6hXyy2DsM5W/giphy-downsized-large.gif\"\n      //src = \"https://media.giphy.com/media/1msxZUIsqN5pide6o5/giphy.gif\" \n      //src = \"https://media.giphy.com/media/iDJQRjTCenF7A4BRyU/giphy.gif\"\n      //src = \"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\"\n      ,\n      alt: \"Ninja gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWallet,\n      className: \"cta-button connect-wallet-button\",\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 2\n  }, this);\n\n  // ページがリロードされると呼び出されます。\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"left\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: \"\\uD83D\\uDC31\\u200D\\uD83D\\uDC64 Ninja Name Service\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"subtitle\",\n              children: \"Your immortal API on the blockchain!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 5\n      }, this), !currentAccount && renderNotConnectedContainer(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `built with @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 3\n  }, this);\n};\n_s(App, \"Oez+vfH4X005OLgBo/Rzy9wdCKo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","twitterLogo","ethers","jsxDEV","_jsxDEV","TWITTER_HANDLE","TWITTER_LINK","App","_s","currentAccount","setCurrentAccount","connectWallet","ethereum","window","alert","accounts","request","method","console","log","error","checkIfWalletIsConnected","length","account","renderNotConnectedContainer","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","href","target","rel","_c","$RefreshReg$"],"sources":["/Users/007/DEV/Unchain/cool-domains/frontend/domain-starter-project/src/App.js"],"sourcesContent":["// import React from 'react';\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\"\nimport {ethers} from \"ethers\";\n\n// Constants\nconst TWITTER_HANDLE = '_UNCHAIN';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  //ユーザーのウォレットアドレスをstate管理しています。冒頭のuseStateのインポートを忘れないでください。\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  // connectWallet 関数を定義\n  const connectWallet = async () => {\n\ttry {\n\t\tconst { ethereum } = window;\n\n\t\tif (!ethereum) {\n\t\t\talert(\"Get Metamask -> https://metamask.io/\");\n\t\t\treturn;\n\t\t}\n\n\t\t// アカウントへのアクセスを要求するメソッドを使用します。\n\t\tconst accounts = await ethereum.request({\n\t\t\tmethod: \"eth_requestAccounts\"\n\t\t});\n\n\t\t// Metamask を一度認証すれば Connected とコンソールに表示されます。\n\t\tconsole.log(\"Connected\", accounts[0]);\n\t\tsetCurrentAccount(accounts[0]);\n\t} catch (error) {\n\t  console.log(error);\n\t}\n  };\n  // ウォレットの接続を確認します。\n  //const checkIfWalletIsConnected = () => {\n  const checkIfWalletIsConnected = async () => {\n\t // window.ethereumの設定。この表記法はJavascriptの「分割代入」を参照。\n\t const {ethereum} = window;\n\n\t if (!ethereum) {\n\t\tconsole.log(\"Make sure you have Metamask!\");\n\t\treturn;\n\t } else {\n\t\tconsole.log(\"You have the ethereum object\", ethereum);\n\t }\n\n\t // ユーザーのウォレットをリクエストします。\n\t const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n\t // ユーザーが複数のアカウントを持っている場合もあります。ここでは最初のアドレスを使います。\n\t if (accounts.length !==0) {\n\t\tconst account = accounts[0];\n\t\tconsole.log(\"Found an authorized account:\", account);\n\t\tsetCurrentAccount(account);\n\t } else {\n\t\tconsole.log(\"No authorized account found\");\n\t }\n  };\n\n   // まだウォレットに接続されていない場合のレンダリングです。\n   const renderNotConnectedContainer = () => (\n\t<div className = \"connect-wallet-container\">\n\t\t<img\n\t\t  src = \"https://media.giphy.com/media/yy6hXyy2DsM5W/giphy-downsized-large.gif\"\n\t\t  //src = \"https://media.giphy.com/media/1msxZUIsqN5pide6o5/giphy.gif\" \n\t\t  //src = \"https://media.giphy.com/media/iDJQRjTCenF7A4BRyU/giphy.gif\"\n\t\t  //src = \"https://media.giphy.com/media/3ohhwytHcusSCXXOUg/giphy.gif\"\n\t\t  alt = \"Ninja gif\"\n\t\t/>\n\t\t{/* Connect Wallet ボタンが押されたときのみ connectWallet関数 を呼び出します。 */}\n\t\t{/* <button className = \"cta-button connect-wallet-button\"> */}\n\t\t<button \n\t\t\tonClick={connectWallet}\n\t\t\tclassName = \"cta-button connect-wallet-button\"\n\t\t>\n\t\t\tConnect Wallet\n\t\t</button>\n\t</div>\n   );\n\n   // ページがリロードされると呼び出されます。\n   useEffect(() => {\n\tcheckIfWalletIsConnected();\n   },[]);\n\n  return (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"header-container\">\n\t\t\t\t\t<header>\n            \t\t\t<div className=\"left\">\n             \t\t\t\t <p className=\"title\">🐱‍👤 Ninja Name Service</p>\n             \t\t\t\t <p className=\"subtitle\">Your immortal API on the blockchain!</p>\n            \t\t\t</div>\n\t\t\t\t\t</header>\n\t\t\t\t</div>\n\n\t\t\t\t{/* currentAccount が存在しない場合、Connect Wallet ボタンを表示します*/}\n\t\t\t\t{!currentAccount && renderNotConnectedContainer()}\n\n\t\t\t\t{/* render 関数をここに追加します */}\n\t\t\t\t{/* {renderNotConnectedContainer()} */}\n\n        \t\t<div className=\"footer-container\">\n\t\t\t\t\t<img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n\t\t\t\t\t<a\n\t\t\t\t\t\tclassName=\"footer-text\"\n\t\t\t\t\t\thref={TWITTER_LINK}\n\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\trel=\"noreferrer\"\n\t\t\t\t\t>\n\t\t\t\t\t\t{`built with @${TWITTER_HANDLE}`}\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}